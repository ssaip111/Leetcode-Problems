//O(n3) â€“ using 3sum + 2sum(Two Pointer)
public class Solution {
    public IList<IList<int>> FourSum(int[] nums, int target) {
       Array.Sort(nums);
       IList<IList<int>> quadruplets = new List<IList<int>>();
       
       if(nums == null)
           return null;
       if(nums.Length == 1)
           return quadruplets;
       
       for(int i=0; i<nums.Length-3; i++)
       {
         if (i > 0 && nums[i] == nums[i - 1]) 
            continue;
           
         for(int j=i+1; j<nums.Length-2; j++)
          {
           int left = j+1; 
           int right = nums.Length-1;
           if (j > i+1 && nums[j] == nums[j - 1]) 
             continue;
          
           while(left < right)
           {     
             if(right<nums.Length-1 && nums[right] == nums[right+1]) 
              {
                right--;
                continue;
              }
             if(left>j+1 && nums[left] == nums[left-1]) 
              {
                left++;;
                continue;
              }
             if(nums[left]+nums[right]+nums[i]+nums[j] == target)
             {
                 quadruplets.Add(new List<int>{nums[i],nums[j], nums[left],nums[right]});
                 left++;
                 right--;
             }
             else if ( nums[left]+nums[right]+nums[i]+nums[j] > target)
                 right--;
             else 
                 left++;
              
             
            }
        }
       }
       return quadruplets;
    }
}
