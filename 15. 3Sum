public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
       
      //O(n3) – using 3 for loops
       Array.Sort(nums);
       IList<IList<int>> triplets = new List<IList<int>>();
       
       if(nums == null || nums.Length == 1)
           return null;
    
        for(int i=0 ;i<nums.Length-2; i++)
            for(int j=i+1; j<nums.Length-1; j++)
                for(int k =j+1; k<nums.Length; k++)
                    if((i!=j && i!=k && j!=k) && nums[i]+nums[j]+nums[k] == 0)
                    {
                        List<int> sol = new List<int>{nums[i],nums[j],nums[k]}; 
                        if(triplets.Contains(sol) == false);
                           triplets.Add(sol);
                    }
       
        for(int i1 = 0; i1<triplets.Count; i1++)
          for(int j1= i1+1; j1<triplets.Count; j1++)
          {
              if(triplets[i1].SequenceEqual(triplets[j1]))
                  triplets.Remove(triplets[j1]);
          }
       return triplets;
    }
}

//O(n2) – using 2 Pointers
public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
      
       Array.Sort(nums);
       IList<IList<int>> triplets = new List<IList<int>>();
       
       if(nums == null)
           return null;
       if(nums.Length == 1)
           return triplets;
       
       
       for(int i=0; i<nums.Length; i++)
       {
           int left = i+1; 
           int right = nums.Length-1;
           
           if (i > 0 && nums[i] == nums[i - 1]) 
            continue;
             
           while(left < right)
           {
              if (right< nums.Length - 1 && nums[right] == nums[right + 1]) 
              {
                right--;
                continue;
              }
               
             if(nums[left] + nums[right] + nums[i] == 0)
             {
                 triplets.Add(new List<int>{nums[i],nums[left],nums[right]});
                 left++;
                 right--;
             }
             else if ( nums[left] + nums[right] + nums[i] > 0)
                 right--;
             else 
                 left++;
           }
       }
    
       return triplets;
    }
}
